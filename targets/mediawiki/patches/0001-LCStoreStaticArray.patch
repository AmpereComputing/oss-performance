--- a/includes/cache/LocalisationCache.php	2014-11-26 18:39:08.000000000 -0800
+++ b/includes/cache/LocalisationCache.php	2015-05-19 17:06:55.230062823 -0700
@@ -195,7 +195,8 @@
 			switch ( $conf['store'] ) {
 				case 'files':
 				case 'file':
-					$storeClass = 'LCStoreCDB';
+					$storeClass = 'LCStoreStaticArray';
+					//$storeClass = 'LCStoreCDB';
 					break;
 				case 'db':
 					$storeClass = 'LCStoreDB';
@@ -1131,6 +1132,86 @@
 	function set( $key, $value );
 }
 
+class LCStoreStaticArray implements LCStore {
+  private $currentLang = null;
+  private $data = array();
+  private $fname = null;
+  private $dir;
+
+  public function __construct($conf) {
+		global $wgCacheDirectory;
+    $this->dir = $wgCacheDirectory;
+  }
+
+  public function startWrite($code) {
+    $this->currentLang = $code;
+    $this->fname = $this->dir.'/'.$code.'.l10n.php';
+    $this->data[$code] = array();
+    if (file_exists($this->fname)) {
+      $this->data[$code] = require($this->fname);
+    }
+  }
+
+  public function set($key, $value) {
+    $this->data[$this->currentLang][$key] = self::encode($value);
+  }
+  
+  private static function encode($value) {
+    if (is_scalar($value) || $value === null) {
+      // [V]alue
+      return ['v', $value];
+    }
+    if (is_object($value)) {
+      // [S]erialized
+      return ['s', serialize($value)];
+    }
+    if (is_array($value)) {
+      // [A]rray
+      return ['a', array_map(function($v) { return self::encode($v); }, $value)];
+    }
+
+    die("Can't encode '".var_export($value, true)."'");
+  }
+
+  private static function decode($encoded) {
+    $type = $encoded[0];
+    $data = $encoded[1];
+
+    if ($type === 'v') {
+      return $data;
+    }
+    if ($type === 's') {
+      return unserialize($data);
+    }
+    if ($type === 'a') {
+      return array_map(function($v) { return self::decode($v); }, $data);
+    }
+
+    die("Can't decode: '".var_export($encoded, true)."'");
+  }
+
+  public function finishWrite() {
+    file_put_contents($this->fname, '<?php return '.var_export($this->data[$this->currentLang], true).';');
+    $this->currentLang = null;
+    $this->fname = null;
+  }
+
+  public function get($code, $key) {
+    if (!array_key_exists($code, $this->data)) {
+      $fname = $this->dir.'/'.$code.'.l10n.php';
+      if (!file_exists($fname)) {
+        return null;
+      }
+      $this->data[$code] = require($fname);
+    }
+    $data = $this->data[$code];
+    if (array_key_exists($key, $data)) {
+      return self::decode($data[$key]);
+    }
+    return null;
+  }
+}
+
 /**
  * LCStore implementation which uses the standard DB functions to store data.
  * This will work on any MediaWiki installation.
